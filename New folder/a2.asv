%% Import data from text file.
% Script for importing data from the following text files:
%
%    C:\Users\Radu\Desktop\neuronhw3\
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2013/10/31 00:48:52
close all;clc; clear all;
%% Initialize variables.
filename{1} = 'C:\Users\Radu\Documents\GitHub\PlethysmoShield\New folder\d1_1.dat';
filename{2} = 'C:\Users\Radu\Documents\GitHub\PlethysmoShield\New folder\d2_1.dat';
filename{3} = 'C:\Users\Radu\Documents\GitHub\PlethysmoShield\New folder\d1_2.dat';
filename{4} = 'C:\Users\Radu\Documents\GitHub\PlethysmoShield\New folder\d2_2.dat';
filename{5} = 'C:\Users\Radu\Documents\GitHub\PlethysmoShield\New folder\forfit1.dat';
filename{6} = 'C:\Users\Radu\Documents\GitHub\PlethysmoShield\New folder\forfit2.dat';
filename{7} = 'C:\Users\Radu\Documents\GitHub\PlethysmoShield\New folder\forfit3.dat';
filename{8} = 'C:\Users\Radu\Documents\GitHub\PlethysmoShield\New folder\forfit4.dat';
filename{9} = 'C:\Users\Radu\Documents\GitHub\PlethysmoShield\New folder\forfit5.dat';
filename{10} = 'C:\Users\Radu\Documents\GitHub\PlethysmoShield\New folder\forfit6.dat';
delimiter = '';

%% Format string for each line of text:
%   column1: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%[^\n\r]';

%% Open the text file.
for a = 1:10
    fileID{a} = fopen(filename{a},'r');
end

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
for a = 1:10
dataArray{a} = textscan(fileID{a}, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);
fclose(fileID{a});
end

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
for a = 1:10
    data{a} = dataArray{a}{:, 1};
end
%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans;

%%
d = logspace(-1,1,20);
figure(1);
for a = 1:4
loglog(d(end:-1:1),abs(data{a}));
hold all;
end
legend('fiber 1 @ node','fiber 2 @ node','fiber 1 @ internode','fiber 2 @ internode',0)

figure(2);
for a = 1:4
semilogx(d(end:-1:1),abs(data{a}));
hold all;
end
legend('fiber 1 @ node','fiber 2 @ node','fiber 1 @ internode','fiber 2 @ internode',0)

%2C

fib1node=0.42724609;
fib2node=0.53100586;
fib1inter=0.39367676;
fib2inter=0.54931641;
dt = 1e-3;
for a = 5:10
    figure();
    these_data = data{a}(floor(end/2):end);
    t = [1:length(these_data)]'.*dt;
    plot(these_data);
    log_data = log(these_data);
    fit_coeffs{a} = polyfit(t,log_data,1);
    yhat = polyval(fit_coeffs{a},t);
    st = sum((log_data-mean(log_data)).^2);
    sr = sum((log_data-yhat).^2);
    R2{a} = (st-sr)/st;
end

distances = [1e1 1e0 1e-1];
R2fib1 = cell2mat(R2(5:7));
R2fib2 = cell2mat(R2(8:10));
figure();
semilogx(distances,R2fib1,'ko');
hold on;
semilogx(distances,R2fib2,'ks');
title('Goodness of fit vs distance');
xlabel('Electrode to fiber distance (mm)');
ylabel('R^2 for exponential fit');

R2fib1 = cell2mat(fit_coeffs);
R2fib2 = cell2mat(R2(8:10));
figure();
semilogx(distances,R2fib1,'ko');
hold on;
semilogx(distances,R2fib2,'ks');
title('Goodness of fit vs distance');
xlabel('Electrode to fiber distance (mm)');
ylabel('R^2 for exponential fit');